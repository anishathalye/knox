#lang yosys

#|
module multi_port_memory #(
) (
    input clk,
    input resetn,
    input en,
    output [1:0] data_out
);

reg [1:0] data [1:0];
reg len;

always @(posedge clk) begin
    if (!resetn) begin
        if (en) begin
            /* ensures that this remains a memory */
            data[len] <= data[len];
        end
    end else begin
        /* results in Yosys synthesizing a multi-port memory */
        data[0] <= 2'b01;
        data[1] <= 2'b10;
    end
end

always @(*) begin
    data_out = data[0];
end

endmodule
|#

; SMT-LIBv2 description generated by Yosys 0.21 (git sha1 e6d2a900a97, clang 13.1.6 -fPIC -Os)
; yosys-smt2-stdt
; yosys-smt2-module multi_port_memory
(declare-datatype |multi_port_memory_s| ((|multi_port_memory_mk|
  (|multi_port_memory_is| Bool)
  (|multi_port_memory#0| Bool) ; \clk
  (|multi_port_memory#1#0| (Array (_ BitVec 1) (_ BitVec 2))) ; data
  (|multi_port_memory#3| (_ BitVec 1)) ; \len
  (|multi_port_memory#5| Bool) ; \en
  (|multi_port_memory#6| Bool) ; \resetn
)))
; yosys-smt2-input clk 1
; yosys-smt2-clock clk posedge
; yosys-smt2-witness {"offset": 0, "path": ["\\clk"], "smtname": "clk", "type": "posedge", "width": 1}
; yosys-smt2-witness {"offset": 0, "path": ["\\clk"], "smtname": "clk", "type": "input", "width": 1}
(define-fun |multi_port_memory_n clk| ((state |multi_port_memory_s|)) Bool (|multi_port_memory#0| state))
; yosys-smt2-memory data 1 2 2 3 sync
; yosys-smt2-witness {"path": ["\\data"], "rom": false, "size": 2, "smtname": "data", "statebv": false, "type": "mem", "uninitialized": [{"offset": 0, "width": 4}], "width": 2}
(define-fun |multi_port_memory_m data| ((state |multi_port_memory_s|)) (Array (_ BitVec 1) (_ BitVec 2)) (|multi_port_memory#1#0| state))
(define-fun |multi_port_memory_m:R0A data| ((state |multi_port_memory_s|)) (_ BitVec 1) #b0) ; 1'0
(define-fun |multi_port_memory#2| ((state |multi_port_memory_s|)) (_ BitVec 2) (select (|multi_port_memory#1#0| state) (|multi_port_memory_m:R0A data| state))) ; \data_out
(define-fun |multi_port_memory_m:R0D data| ((state |multi_port_memory_s|)) (_ BitVec 2) (|multi_port_memory#2| state))
(define-fun |multi_port_memory_m:R1A data| ((state |multi_port_memory_s|)) (_ BitVec 1) (|multi_port_memory#3| state)) ; \len
(define-fun |multi_port_memory#4| ((state |multi_port_memory_s|)) (_ BitVec 2) (select (|multi_port_memory#1#0| state) (|multi_port_memory_m:R1A data| state))) ; $memrd$\data$multi_port_memory.v:16$19_DATA
(define-fun |multi_port_memory_m:R1D data| ((state |multi_port_memory_s|)) (_ BitVec 2) (|multi_port_memory#4| state))
; yosys-smt2-output data_out 2
(define-fun |multi_port_memory_n data_out| ((state |multi_port_memory_s|)) (_ BitVec 2) (|multi_port_memory#2| state))
; yosys-smt2-input en 1
; yosys-smt2-witness {"offset": 0, "path": ["\\en"], "smtname": "en", "type": "input", "width": 1}
(define-fun |multi_port_memory_n en| ((state |multi_port_memory_s|)) Bool (|multi_port_memory#5| state))
; yosys-smt2-input resetn 1
; yosys-smt2-witness {"offset": 0, "path": ["\\resetn"], "smtname": "resetn", "type": "input", "width": 1}
(define-fun |multi_port_memory_n resetn| ((state |multi_port_memory_s|)) Bool (|multi_port_memory#6| state))
(define-fun |multi_port_memory#7| ((state |multi_port_memory_s|)) (_ BitVec 1) (ite (|multi_port_memory#5| state) (|multi_port_memory#3| state) #b0)) ; $2$memwr$\data$multi_port_memory.v:16$1_ADDR[0:0]$16
(define-fun |multi_port_memory#8| ((state |multi_port_memory_s|)) (_ BitVec 1) (ite (|multi_port_memory#6| state) #b0 (|multi_port_memory#7| state))) ; $0$memwr$\data$multi_port_memory.v:16$1_ADDR[0:0]$5
(define-fun |multi_port_memory#9| ((state |multi_port_memory_s|)) (_ BitVec 2) (ite (|multi_port_memory#5| state) (|multi_port_memory#4| state) #b00)) ; $2$memwr$\data$multi_port_memory.v:16$1_DATA[1:0]$17
(define-fun |multi_port_memory#10| ((state |multi_port_memory_s|)) (_ BitVec 2) (ite (|multi_port_memory#6| state) #b00 (|multi_port_memory#9| state))) ; $0$memwr$\data$multi_port_memory.v:16$1_DATA[1:0]$6
(define-fun |multi_port_memory#11| ((state |multi_port_memory_s|)) (_ BitVec 1) (ite (|multi_port_memory#5| state) #b1 #b0)) ; $2$memwr$\data$multi_port_memory.v:16$1_EN[1:0]$18 [1]
(define-fun |multi_port_memory#12| ((state |multi_port_memory_s|)) (_ BitVec 1) (ite (|multi_port_memory#6| state) #b0 (|multi_port_memory#11| state))) ; $0$memwr$\data$multi_port_memory.v:16$1_EN[1:0]$7 [1]
(define-fun |multi_port_memory_m:W0A data| ((state |multi_port_memory_s|)) (_ BitVec 1) (|multi_port_memory#8| state)) ; $0$memwr$\data$multi_port_memory.v:16$1_ADDR[0:0]$5
(define-fun |multi_port_memory_m:W0D data| ((state |multi_port_memory_s|)) (_ BitVec 2) (|multi_port_memory#10| state)) ; $0$memwr$\data$multi_port_memory.v:16$1_DATA[1:0]$6
(define-fun |multi_port_memory_m:W0M data| ((state |multi_port_memory_s|)) (_ BitVec 2) (concat (|multi_port_memory#12| state) (|multi_port_memory#12| state))) ; { $0$memwr$\data$multi_port_memory.v:16$1_EN[1:0]$7 [1] $0$memwr$\data$multi_port_memory.v:16$1_EN[1:0]$7 [1] }
(define-fun |multi_port_memory#1#1| ((state |multi_port_memory_s|)) (Array (_ BitVec 1) (_ BitVec 2)) (ite (= (|multi_port_memory_m:W0M data| state) #b00) (|multi_port_memory#1#0| state) (store (|multi_port_memory#1#0| state) (|multi_port_memory_m:W0A data| state) (bvor (bvand (|multi_port_memory_m:W0D data| state) (|multi_port_memory_m:W0M data| state)) (bvand (select (|multi_port_memory#1#0| state) (|multi_port_memory_m:W0A data| state)) (bvnot (|multi_port_memory_m:W0M data| state))))))) ; data
(define-fun |multi_port_memory#13| ((state |multi_port_memory_s|)) (_ BitVec 1) (ite (|multi_port_memory#6| state) #b1 #b0)) ; $0$memwr$\data$multi_port_memory.v:20$2_EN[1:0]$8 [1]
(define-fun |multi_port_memory_m:W1A data| ((state |multi_port_memory_s|)) (_ BitVec 1) #b0) ; 1'0
(define-fun |multi_port_memory_m:W1D data| ((state |multi_port_memory_s|)) (_ BitVec 2) #b01) ; 2'01
(define-fun |multi_port_memory_m:W1M data| ((state |multi_port_memory_s|)) (_ BitVec 2) (concat (|multi_port_memory#13| state) (|multi_port_memory#13| state))) ; { $0$memwr$\data$multi_port_memory.v:20$2_EN[1:0]$8 [1] $0$memwr$\data$multi_port_memory.v:20$2_EN[1:0]$8 [1] }
(define-fun |multi_port_memory#1#2| ((state |multi_port_memory_s|)) (Array (_ BitVec 1) (_ BitVec 2)) (ite (= (|multi_port_memory_m:W1M data| state) #b00) (|multi_port_memory#1#1| state) (store (|multi_port_memory#1#1| state) (|multi_port_memory_m:W1A data| state) (bvor (bvand (|multi_port_memory_m:W1D data| state) (|multi_port_memory_m:W1M data| state)) (bvand (select (|multi_port_memory#1#1| state) (|multi_port_memory_m:W1A data| state)) (bvnot (|multi_port_memory_m:W1M data| state))))))) ; data
(define-fun |multi_port_memory_m:W2A data| ((state |multi_port_memory_s|)) (_ BitVec 1) #b1) ; 1'1
(define-fun |multi_port_memory_m:W2D data| ((state |multi_port_memory_s|)) (_ BitVec 2) #b10) ; 2'10
(define-fun |multi_port_memory_m:W2M data| ((state |multi_port_memory_s|)) (_ BitVec 2) (concat (|multi_port_memory#13| state) (|multi_port_memory#13| state))) ; { $0$memwr$\data$multi_port_memory.v:20$2_EN[1:0]$8 [1] $0$memwr$\data$multi_port_memory.v:20$2_EN[1:0]$8 [1] }
(define-fun |multi_port_memory#1#3| ((state |multi_port_memory_s|)) (Array (_ BitVec 1) (_ BitVec 2)) (ite (= (|multi_port_memory_m:W2M data| state) #b00) (|multi_port_memory#1#2| state) (store (|multi_port_memory#1#2| state) (|multi_port_memory_m:W2A data| state) (bvor (bvand (|multi_port_memory_m:W2D data| state) (|multi_port_memory_m:W2M data| state)) (bvand (select (|multi_port_memory#1#2| state) (|multi_port_memory_m:W2A data| state)) (bvnot (|multi_port_memory_m:W2M data| state))))))) ; data
(define-fun |multi_port_memory_a| ((state |multi_port_memory_s|)) Bool true)
(define-fun |multi_port_memory_u| ((state |multi_port_memory_s|)) Bool true)
(define-fun |multi_port_memory_i| ((state |multi_port_memory_s|)) Bool true)
(define-fun |multi_port_memory_h| ((state |multi_port_memory_s|)) Bool true)
(define-fun |multi_port_memory_t| ((state |multi_port_memory_s|) (next_state |multi_port_memory_s|)) Bool 
  (= (|multi_port_memory#1#3| state) (|multi_port_memory#1#0| next_state)) ; data
) ; end of module multi_port_memory
; yosys-smt2-topmod multi_port_memory
; end of yosys output
