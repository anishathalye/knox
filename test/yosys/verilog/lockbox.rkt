#lang yosys

#|
module lockbox #(
    parameter WIDTH = 128
) (input clk, input en, input op, input [WIDTH-1:0] secret, input [WIDTH-1:0] password, output [WIDTH-1:0] out, output dummy_out);

reg [WIDTH-1:0] stored_secret;
reg [WIDTH-1:0] stored_password;
reg [WIDTH-1:0] returned_secret;
reg [63:0] count_cycle;
reg x1;
reg x2;

initial begin
    stored_secret = 0;
    stored_password = 0;
    returned_secret = 0;
    count_cycle = 0;
    x1 = 0;
    x2 = 1;
end

always @(posedge clk) begin
    count_cycle <= count_cycle + 1;
    x1 <= !x1;
    x2 <= !x2;
    if (en) begin
        if (op) begin
            // store
            stored_secret <= secret;
            stored_password <= password;
            returned_secret <= 0;
        end else begin
            // get
            if (password == stored_password) begin
                returned_secret <= stored_secret;
            end else begin
                returned_secret <= 0;
            end
            stored_secret <= 0;
            // NOTE: Rosette verification actually caught a bug here; there
            // was a typo:
            // stored_pasword <= 0;
            stored_password <= 0;
        end
        value <= value + delta;
    end else begin
        returned_secret <= 0;
    end
end
assign out = (x1 != x2) ? returned_secret : 0;
assign dummy_out = count_cycle;

endmodule
|#

; SMT-LIBv2 description generated by Yosys 0.9+3806 (git sha1 d30063ea6, clang 12.0.0 -fPIC -Os)
; yosys-smt2-stdt
; yosys-smt2-module lockbox
(declare-datatype |lockbox_s| ((|lockbox_mk|
  (|lockbox_is| Bool)
  (|lockbox#0| Bool) ; \clk
  (|lockbox#1| (_ BitVec 64)) ; \count_cycle
  (|lockbox#2| Bool) ; \en
  (|lockbox#3| Bool) ; \op
  (|lockbox#4| (_ BitVec 128)) ; \returned_secret
  (|lockbox#5| (_ BitVec 1)) ; \x1
  (|lockbox#6| (_ BitVec 1)) ; \x2
  (|lockbox#9| (_ BitVec 128)) ; \password
  (|lockbox#10| (_ BitVec 128)) ; \secret
  (|lockbox#11| (_ BitVec 128)) ; \stored_password
  (|lockbox#12| (_ BitVec 128)) ; \stored_secret
)))
; yosys-smt2-input clk 1
; yosys-smt2-clock clk posedge
(define-fun |lockbox_n clk| ((state |lockbox_s|)) Bool (|lockbox#0| state))
; yosys-smt2-register count_cycle 64
(define-fun |lockbox_n count_cycle| ((state |lockbox_s|)) (_ BitVec 64) (|lockbox#1| state))
; yosys-smt2-output dummy_out 1
(define-fun |lockbox_n dummy_out| ((state |lockbox_s|)) Bool (= ((_ extract 0 0) (|lockbox#1| state)) #b1))
; yosys-smt2-input en 1
(define-fun |lockbox_n en| ((state |lockbox_s|)) Bool (|lockbox#2| state))
; yosys-smt2-input op 1
(define-fun |lockbox_n op| ((state |lockbox_s|)) Bool (|lockbox#3| state))
(define-fun |lockbox#7| ((state |lockbox_s|)) Bool (distinct (|lockbox#5| state) (|lockbox#6| state))) ; $ne$lockbox.v:49$7_Y
(define-fun |lockbox#8| ((state |lockbox_s|)) (_ BitVec 128) (ite (|lockbox#7| state) (|lockbox#4| state) #b00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)) ; \out
; yosys-smt2-output out 128
(define-fun |lockbox_n out| ((state |lockbox_s|)) (_ BitVec 128) (|lockbox#8| state))
; yosys-smt2-input password 128
(define-fun |lockbox_n password| ((state |lockbox_s|)) (_ BitVec 128) (|lockbox#9| state))
; yosys-smt2-register returned_secret 128
(define-fun |lockbox_n returned_secret| ((state |lockbox_s|)) (_ BitVec 128) (|lockbox#4| state))
; yosys-smt2-input secret 128
(define-fun |lockbox_n secret| ((state |lockbox_s|)) (_ BitVec 128) (|lockbox#10| state))
; yosys-smt2-register stored_password 128
(define-fun |lockbox_n stored_password| ((state |lockbox_s|)) (_ BitVec 128) (|lockbox#11| state))
; yosys-smt2-register stored_secret 128
(define-fun |lockbox_n stored_secret| ((state |lockbox_s|)) (_ BitVec 128) (|lockbox#12| state))
; yosys-smt2-register x1 1
(define-fun |lockbox_n x1| ((state |lockbox_s|)) Bool (= ((_ extract 0 0) (|lockbox#5| state)) #b1))
; yosys-smt2-register x2 1
(define-fun |lockbox_n x2| ((state |lockbox_s|)) Bool (= ((_ extract 0 0) (|lockbox#6| state)) #b1))
(define-fun |lockbox#13| ((state |lockbox_s|)) (_ BitVec 128) (ite (|lockbox#3| state) (|lockbox#10| state) #b00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)) ; $procmux$31_Y
(define-fun |lockbox#14| ((state |lockbox_s|)) (_ BitVec 128) (ite (|lockbox#2| state) (|lockbox#13| state) (|lockbox#12| state))) ; $0\stored_secret[127:0]
(define-fun |lockbox#15| ((state |lockbox_s|)) (_ BitVec 128) (ite (|lockbox#3| state) (|lockbox#9| state) #b00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)) ; $procmux$25_Y
(define-fun |lockbox#16| ((state |lockbox_s|)) (_ BitVec 128) (ite (|lockbox#2| state) (|lockbox#15| state) (|lockbox#11| state))) ; $0\stored_password[127:0]
(define-fun |lockbox#17| ((state |lockbox_s|)) Bool (not (or  (= ((_ extract 0 0) (|lockbox#6| state)) #b1) false))) ; $0\x2[0:0]
(define-fun |lockbox#18| ((state |lockbox_s|)) Bool (not (or  (= ((_ extract 0 0) (|lockbox#5| state)) #b1) false))) ; $0\x1[0:0]
(define-fun |lockbox#19| ((state |lockbox_s|)) Bool (= (|lockbox#9| state) (|lockbox#11| state))) ; $eq$lockbox.v:33$5_Y
(define-fun |lockbox#20| ((state |lockbox_s|)) (_ BitVec 128) (ite (|lockbox#19| state) (|lockbox#12| state) #b00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)) ; $procmux$13_Y
(define-fun |lockbox#21| ((state |lockbox_s|)) (_ BitVec 128) (ite (|lockbox#3| state) #b00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (|lockbox#20| state))) ; $procmux$16_Y
(define-fun |lockbox#22| ((state |lockbox_s|)) (_ BitVec 128) (ite (|lockbox#2| state) (|lockbox#21| state) #b00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)) ; $0\returned_secret[127:0]
(define-fun |lockbox#23| ((state |lockbox_s|)) (_ BitVec 64) (bvadd (|lockbox#1| state) #b0000000000000000000000000000000000000000000000000000000000000001)) ; $0\count_cycle[63:0]
(define-fun |lockbox_a| ((state |lockbox_s|)) Bool true)
(define-fun |lockbox_u| ((state |lockbox_s|)) Bool true)
(define-fun |lockbox_i| ((state |lockbox_s|)) Bool (and
  (= (|lockbox#1| state) #b0000000000000000000000000000000000000000000000000000000000000000) ; count_cycle
  (= (|lockbox#4| state) #b00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000) ; returned_secret
  (= (|lockbox#11| state) #b00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000) ; stored_password
  (= (|lockbox#12| state) #b00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000) ; stored_secret
  (= (= ((_ extract 0 0) (|lockbox#5| state)) #b1) false) ; x1
  (= (= ((_ extract 0 0) (|lockbox#6| state)) #b1) true) ; x2
))
(define-fun |lockbox_h| ((state |lockbox_s|)) Bool true)
(define-fun |lockbox_t| ((state |lockbox_s|) (next_state |lockbox_s|)) Bool (and
  (= (|lockbox#14| state) (|lockbox#12| next_state)) ; $procdff$35 \stored_secret
  (= (|lockbox#16| state) (|lockbox#11| next_state)) ; $procdff$36 \stored_password
  (= (ite (|lockbox#17| state) #b1 #b0) (|lockbox#6| next_state)) ; $procdff$40 \x2
  (= (ite (|lockbox#18| state) #b1 #b0) (|lockbox#5| next_state)) ; $procdff$39 \x1
  (= (|lockbox#22| state) (|lockbox#4| next_state)) ; $procdff$37 \returned_secret
  (= (|lockbox#23| state) (|lockbox#1| next_state)) ; $procdff$38 \count_cycle
)) ; end of module lockbox
; yosys-smt2-topmod lockbox
; end of yosys output
